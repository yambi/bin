#!/usr/bin/python
import os, sys
import tempfile
from xml.etree.ElementTree import *

svg_ns      = 'http://www.w3.org/2000/svg'
inkscape_ns = 'http://www.inkscape.org/namespaces/inkscape'
sodipodi_ns = 'http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd'

bg_keyword = 'master' # master slide name
tp_keyword = 'total_page' # total page id prefix
cp_keyword = 'current_page' # current page id prefix
t_keyword = 'title' # title id prefix

argv = sys.argv
argc = len(argv)
if(argc < 2):
    print 'Usage: svg2pdf [svg file]'
    quit()

path = argv[1]
base, ext = os.path.splitext(path)

tree = parse(path)
pdfs = ''
fg_list = [] # foreground layers
fg_sub_list = [] # foreground sublayers
bg_list = [] # background layers
tp_list = [] # total page list
cp_list = [] # current page list 
t_list = []  # title list

# finding keywords
for text in tree.findall('.//{%s}text' % svg_ns):
    if text.get('id').startswith(tp_keyword):
        tp_list.append(text)
    if text.get('id').startswith(cp_keyword):
        cp_list.append(text)
    if text.get('id').startswith(t_keyword):
        t_list.append(text)


# setting all foreground layers hidden and all background visible
for layer in tree.getroot():
    if layer.tag==('{%s}g' % svg_ns) and layer.get('{%s}groupmode' % inkscape_ns)=="layer":
        if layer.get('{%s}label' % inkscape_ns)==bg_keyword:
            layer.set('style', 'display:inline')
            bg_list.append(layer)
        else:
            layer.set('style', 'display:none')
            fg_list.append(layer)
            fg_sub=[]
            for sublayer in layer:
                if sublayer.tag==('{%s}g' % svg_ns) and sublayer.get('{%s}groupmode' % inkscape_ns)=="layer":
                    sublayer.set('style', 'display:none')
                    fg_sub.append(sublayer)
            fg_sub_list.append(fg_sub)

# create a temporary pdf file for each foreground layer
current_page = 0
for i,layer in enumerate(fg_list):
    page_title = layer.get('{%s}label' % inkscape_ns)
    if page_title.startswith("#"):
        print "skip %s" % page_title
        continue

    current_page+=1
    print "processing %d: %s" % (current_page,page_title);
    layer.set('style', 'display:inline')

    #replace keywords
    for tp in tp_list:
        tp[0].text = '%d'%len(fg_list)
    for cp in cp_list:
        cp[0].text = '%d'%current_page
    for t in t_list:
        t[0].text = '%s'%page_title

    for j in range(len(fg_sub_list[i])+1):
        if j>0:
            fg_sub_list[i][j-1].set('style', 'display:inline')
            print "  processing %s" % fg_sub_list[i][j-1].get('{%s}label' % inkscape_ns);

        temp_svg = tempfile.mkstemp(suffix='.svg')
        tree.write(temp_svg[1], 'UTF-8')

        temp_pdf = tempfile.mkstemp(suffix='.pdf')
        os.close(temp_pdf[0])
        cmd = 'inkscape -C -f \"%s\" -A %s' % (temp_svg[1], temp_pdf[1])
        #print "%s\n" % cmd
        os.system(cmd)
        pdfs += '%s ' % temp_pdf[1]

        os.close(temp_svg[0])
        os.remove(temp_svg[1])
        # if layer name start with "!", hide
        if j==0 and page_title.startswith("!"):
            layer.set('style', 'display:none')
        # if sublayer name start with "!", hide the sublayer
        if j>0 and fg_sub_list[i][j-1].get('{%s}label' % inkscape_ns).startswith("!"):
            fg_sub_list[i][j-1].set('style', 'display:none')
            
    
    layer.set('style', 'display:none')
    for sublayer in fg_sub_list[i]:
        sublayer.set('style', 'display:none')

# bind all the pdf files into one
cmd = "pdftk %s cat output %s.pdf" % (pdfs,base)
os.system(cmd)
print "output %s.pdf (%d pages)" % (base,len(pdfs.split()))

# delete all the temporary pdf files
for temp_pdf_path in pdfs.split():
    os.remove(temp_pdf_path)
